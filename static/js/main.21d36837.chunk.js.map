{"version":3,"sources":["assets/image/logo.png","component/Header.js","component/Sidebar.js","component/Tasks.js","component/Content.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","Sidebar","selectedTab","setselectedTab","console","log","onClick","FORMAT","formatDate","date","format","locale","dateFnsFormat","AddTask","onCancel","onAddTask","useState","task","setTask","setDate","value","onChange","e","target","disabled","onDayChange","day","placeholder","Date","dayPickerProps","modifiers","before","TASKS_HEADER_MAPPING","INBOX","TODAY","NEXT_7","TaskItems","tasks","tasksToRender","filter","isAfter","isBefore","addDays","isToday","map","text","Tasks","showAddTask","setShowAddTask","setTasks","prevState","newTaskItem","length","Content","class","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21d36837.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.edef7337.png\";","import React from 'react';\r\nimport logo from \"../assets/image/logo.png\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <nav>\r\n                <div className='logo'>\r\n                    <img src={logo} alt=\"Todoist\"></img>\r\n                </div>\r\n            </nav>\r\n\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\r\nimport { FaInbox, FaRegCalendarAlt, FaRegCalendarCheck } from 'react-icons/fa';\r\n\r\nconst Sidebar = ({ selectedTab, setselectedTab }) => {\r\n    console.log({ selectedTab });\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className={selectedTab === \"INBOX\" ? \"active\" : \"\"}\r\n                onClick={() => setselectedTab(\"INBOX\")}>\r\n                <  FaInbox className=\"icon\" />\r\n                Inbox\r\n            </div>\r\n            <div className={selectedTab === \"TODAY\" ? \"active\" : \"\"}\r\n                onClick={() => setselectedTab(\"TODAY\")} >\r\n                <FaRegCalendarCheck className=\"icon\" />\r\n                Today\r\n            </div>\r\n            <div className={selectedTab === \"NEXT_7\" ? \"active\" : \"\"}\r\n                onClick={() => setselectedTab(\"NEXT_7\")}>\r\n                <FaRegCalendarAlt className=\"icon\" />\r\n                Next 7 days\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Sidebar;","import React, { useState } from \"react\";\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"react-day-picker/lib/style.css\";\r\nimport dateFnsFormat from \"date-fns/format\";\r\nimport isAfter from \"date-fns/isAfter\";\r\nimport isBefore from \"date-fns/isBefore\";\r\nimport addDays from \"date-fns/addDays\";\r\nimport isToday from \"date-fns/isToday\";\r\n\r\n// const FORMAT = \"dd/MM/yyyy\";\r\n// function formatDate(date, format, locale) {\r\n//     return dateFnsFormat(date, format, { locale });\r\n// }\r\n// const AddTask =({onCancel,onAddTask})=> {\r\n//     const [task, setTask] = useState(\"\");\r\n\r\n//     // const [date, setDate] = useState(null);\r\n//     return (\r\n//         <div className='add-task-dialog'>\r\n//             <input value={task} onChange={(e) =>\r\n//                 setTask(e.target.value)} />\r\n//             <div className='add-task-action-container'>\r\n//  <div className='btn-container'>\r\n//      <button\r\n//          disabled={!task}   //if no task then button id disabled\r\n//          className='add-btn'\r\n//          onClick={() => {\r\n//              onAddTask(task, date);\r\n//              setTask(\"\");\r\n//              onCancel();\r\n//          }}\r\n//                     >Add Task\r\n//                     </button>\r\n//      <button className='cancel-btn'\r\n//          onClick={() => {\r\n//              onCancel();\r\n//              setTask(\"\");\r\n\r\n//          }}\r\n//      >\r\n//          Cancel</button>\r\n//  </div>\r\n//                 <div className='icon-container'>\r\n//                     <  DayPickerInput\r\n//                         onDayChange={(day) => setDate(day)}\r\n//                         formatDate={formatDate}\r\n//                         format={FORMAT}\r\n//                         placeholder={`${dateFnsFormat(new Date(), FORMAT)}`}\r\n//                         dayPickerProps={{         //disabled date before new date\r\n//                             modifiers: {\r\n//                                 disabled: [{ before: new Date() }],\r\n//                             },\r\n//                         }}\r\n//                     />\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n// const TASKS_HEADER_MAPPING = {\r\n//     INBOX: \"Inbox\",\r\n//     TODAY: \"Today\",\r\n//     NEXT_7: \"Next 7 days\"\r\n// }\r\n// const TaskItems = () => ({selectedTab, tasks}) => {\r\n//     if (selectedTab === \"NEXT_7\") {\r\n//         return tasks\r\n//             .filter(\r\n//                 (task) =>\r\n//                     isAfter(task.date, new Date()) &&\r\n//                     isBefore(task.date, addDays(new Date(), 7))\r\n//             )\r\n//             .map((task) => (\r\n//                 <p>\r\n//                     {task.text}{dateFnsFormat(new Date(task.date),\r\n//                      FORMAT)} {\" \"}\r\n//                 </p>\r\n//             ));\r\n//     }\r\n\r\n//     if (selectedTab === \"TODAY\") {\r\n//         return tasks\r\n//             .filter((task) => isToday(task.date)\r\n//             )\r\n//             .map((task) => (\r\n//                 <p>\r\n//                     {task.text}{dateFnsFormat(new Date(task.date),\r\n//                     FORMAT)} {\" \"}\r\n//                 </p>\r\n//             ));\r\n//     }\r\n//     return tasks.map((task) => (\r\n//         <p>\r\n//             {task.text}{dateFnsFormat(new Date(task.date), FORMAT)} {\" \"}\r\n//         </p>\r\n//     ));\r\n// };\r\n\r\n// const Tasks = () => {\r\n// const [showAddTask, setShowAddTask] = useState(false);\r\n// const [tasks, setTasks] = useState([]);\r\n\r\n// const addNewTask = (text, date) => {\r\n//     const newTaskItem = { text, date: date || new Date() };\r\n//     setTasks((prevState) => [...prevState, newTaskItem]);\r\n// };\r\n//     return (\r\n//          <div className='task'>\r\n//             {/* <h1>{TASKS_HEADER_MAPPING[selectedTab]}</h1> */}\r\n//            <div className='add-task-btn'>\r\n\r\n//                 <span className='plus'>+</span>\r\n//                 <span className='add-task-text'>Add Task</span>\r\n//             </div>\r\n//             {showAddTask && (\r\n//                 <AddTask\r\n//                     onAddTask={addNewTask}\r\n//                     onCancel={() => setShowAddTask(false)}\r\n//                 />)\r\n//             }\r\n//             {tasks.length > 0 ?\r\n//            (<TaskItems tasks={tasks}\r\n//                 selectedTab={selectedTab} />) :\r\n//                 (<p>No Add Task yet </p>)\r\n//             }\r\n//         </div>\r\n//     );\r\n// };\r\n// export default Tasks;\r\n\r\nconst FORMAT = \"dd/MM/yyyy\";\r\n\r\nfunction formatDate(date, format, locale) {\r\n  return dateFnsFormat(date, format, { locale });\r\n}\r\nconst AddTask = ({ onCancel, onAddTask }) => {\r\n  const [task, setTask] = useState(\"\");\r\n  const [date, setDate] = useState(null);\r\n\r\n  return (\r\n    <div className=\"add-task-dialog\">\r\n      <input value={task} onChange={(e) => setTask(e.target.value)} />\r\n\r\n      <div className=\"add-task-action-container\">\r\n        <div className=\"btn-container\">\r\n          <button\r\n          disabled={!task}   //if no task then button id disabled\r\n            className=\"add-btn\"\r\n            onClick={() => {\r\n              onAddTask(task,date);\r\n              onCancel();\r\n              setTask(\"\");\r\n            }}\r\n          >\r\n            Add Task\r\n          </button>\r\n\r\n          <button\r\n            className=\"cancel-btn\"\r\n            onClick={() => {\r\n              onCancel();\r\n              setTask(\"\");\r\n            }}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n        <div className=\"icon-container\">\r\n          <DayPickerInput\r\n            onDayChange={(day) => setDate(day)}\r\n            placeholder={`${dateFnsFormat(new Date(), FORMAT)}`}\r\n            formatDate={formatDate}\r\n            format={FORMAT}\r\n            dayPickerProps={{\r\n              modifiers: {\r\n                disabled: [{ before: new Date() }],\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TASKS_HEADER_MAPPING = {\r\n      INBOX: \"Inbox\",\r\n      TODAY: \"Today\",\r\n      NEXT_7: \"Next 7 days\"\r\n  }\r\n\r\n  const TaskItems =  ({selectedTab, tasks}) => {\r\n    let tasksToRender=[...tasks];\r\n    if (selectedTab === \"NEXT_7\") {\r\n      tasksToRender=tasksToRender.filter(\r\n          (task) =>\r\n            isAfter(task.date, new Date()) &&\r\n            isBefore(task.date, addDays(new Date(), 7))\r\n          );\r\n          }\r\n      \r\n          if (selectedTab === \"TODAY\") {\r\n            tasksToRender=tasksToRender.filter((task) => isToday(task.date));\r\n          }\r\n          return (\r\n          <div className=\"task-items-container\">\r\n               {tasksToRender.map( (task) => (\r\n                 <div className=\"task-item\">\r\n                   <span>{task.text}</span>\r\n                   <span>{dateFnsFormat(new Date(task.date), \r\n                   FORMAT)}</span>\r\n                   </div>\r\n               \r\n               ))}\r\n            </div>\r\n        );\r\n  };\r\nconst Tasks = ({selectedTab}) => {\r\n  const [showAddTask, setShowAddTask] = useState(false);\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const addNewTask = (text,date) => {\r\n   const newTaskItem = { text, date: date || new Date() };\r\n    setTasks((prevState) => [...prevState, newTaskItem]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"task\">\r\n    <h1>{TASKS_HEADER_MAPPING[selectedTab]}</h1>\r\n    {\r\n      selectedTab===\"INBOX\"?(\r\n      <div\r\n        className=\"add-task-btn\"\r\n        onClick={() => setShowAddTask((prevState) => !prevState)}\r\n      >\r\n        <span className=\"plus\">+</span>\r\n        <span className=\"add-task-text\">Add Task</span>\r\n      </div>\r\n      ):null\r\n    }\r\n      \r\n      {showAddTask && (\r\n        <AddTask\r\n          onAddTask={addNewTask}\r\n          onCancel={() => setShowAddTask(false)}\r\n        />\r\n      )}\r\n      {tasks.length > 0 ? (\r\n       <TaskItems tasks={tasks} selectedTab={selectedTab} />\r\n      ) : (\r\n        <p>No Add Task yet </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Tasks;\r\n","import React from 'react';\r\nimport { useState } from \"react\";\r\nimport Sidebar from './Sidebar';\r\nimport Tasks from './Tasks';\r\n\r\nconst Content = () => {\r\n    const [selectedTab, setselectedTab] = useState(\"INBOX\")\r\n    return (\r\n        <section class=\"content\">\r\n\r\n            <Sidebar selectedTab={selectedTab} setselectedTab={setselectedTab} />\r\n            <Tasks selectedTab={selectedTab} />\r\n        </section>\r\n    )\r\n}\r\nexport default Content;","import React from 'react';\nimport Header from \"./component/Header\";\nimport Content from './component/Content';\nimport \"./App.css\";\n\n\nconst App = () => {\n    return (\n        <div>\n\n            <Header />\n            <Content />\n        </div>\n    )\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}